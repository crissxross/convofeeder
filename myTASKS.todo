TO DO - main tasks:

  ☐ Implement a convofeeder service for feeding the rounds of dialogue (or interior monologue) into the scene and the appropriate actors' components.

  ✔ Change my data structure so that (player) OPTIONS are not nested inside the player object. See Evernote @done (9/29/2016, 3:05:00 PM)

  ☐ create OP/VK/UN string values as constants like ACTIONS in ngrx (maybe they'll perform as actions too at some point?) and use these in scene-#.json files. Like so:

  export const OP = 'OP';
  export const VK = 'VK';
  export const UN = 'UN';

Streams of Observables:

  ☐ Use Rx for the timing and scheduling of the lines of dialogue/thoughts

  ☐ An observable of user-clicks of the options

  ☐ *takeUntil* rx operator - a round or exchange of speech & thoughts feeds until the options appear:

  ☐ so an observable of the options appearing

  ☐ Each round of speech & thoughts could be one observable stream with the individual actor's lines being filtered from the stream - so:

  ☐ Observables of each actor's utterances or turns - e.g.:
    ☐ Observable from/of playerTurns
    ☐ Observable from/of npcTurns

Queries & puzzlers:

  ☐ ANIMATION - can I use animation to schedule the convo feed? Could I use the ANIMATION CALLBACKS - could I have an observable of animationStarted($event) and animationDone($event) events and use observable to schedule the convo feeds turn by turn?

  ☐ CUSTOM EVENTS using EventEmitter class - maybe I should create custome events for each feed and/or turn in the conversation - then create an OBSERVABLE from those custom events which will schedule the flow and exchanbe of convo feeds ???

  ☐ If I resolve the scene data in route/router, can I access that scene data in a service? But is it necessary to do this?

  ☐ JSON SCENE DATA - should my convo data be (almost) entirely a structure of nested arrays rather than mainly an array of objects?

NOTES:

QUOTE (from RxJS in Action book, p. 138):

FUNCTIONAL VS IMPERATIVE Generally speaking, most of the cases involving using structures like for/of or if/else can be satisfied by using RxJS operators like filter, map, reduce, take, first, last, and others; in other words, most of the complex tasks for which you need to implement loops and branches are just instances of a certain combination of these operators. A familiar example of this is an array. Most uses for/of and if/else statements can be supplanted by a combination of map and filter.